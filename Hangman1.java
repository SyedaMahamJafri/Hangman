/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PROJECT_DS;

/**
 *
 * @author LAPTOP
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
public class Hangman1 extends javax.swing.JFrame {
    private static String path;
    static BST<String> mybst ;
//    public static HangmanP mybst;
    /**
     * Creates new form Hangman1
     */
    public Hangman1() {
        initComponents();
        mybst = new BST<>();
        path="";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        hangstand = new javax.swing.Box.Filler(new java.awt.Dimension(0, 2), new java.awt.Dimension(0, 2), new java.awt.Dimension(32767, 4));
        hangstand1 = new javax.swing.Box.Filler(new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 32767));
        hangStand2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 4), new java.awt.Dimension(0, 4), new java.awt.Dimension(32767, 4));
        hangstand3 = new javax.swing.Box.Filler(new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 32767));
        ANIMAL = new javax.swing.JButton();
        COUNTRIES = new javax.swing.JButton();
        VEGETABLES = new javax.swing.JButton();
        FRUITS = new javax.swing.JButton();
        MOVIES = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(531, 325));

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hangstand.setBackground(new java.awt.Color(0, 0, 0));
        hangstand.setOpaque(true);
        jPanel1.add(hangstand, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 40, 10, 50));

        hangstand1.setBackground(new java.awt.Color(0, 0, 0));
        hangstand1.setOpaque(true);
        jPanel1.add(hangstand1, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 317, 220, 8));

        hangStand2.setBackground(new java.awt.Color(0, 0, 0));
        hangStand2.setOpaque(true);
        jPanel1.add(hangStand2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 11, 293));

        hangstand3.setBackground(new java.awt.Color(0, 0, 0));
        hangstand3.setOpaque(true);
        jPanel1.add(hangstand3, new org.netbeans.lib.awtextra.AbsoluteConstraints(359, 30, 120, 10));

        ANIMAL.setBackground(new java.awt.Color(204, 255, 255));
        ANIMAL.setText("ANIMALS");
        ANIMAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ANIMALMousePressed(evt);
            }
        });
        ANIMAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ANIMALActionPerformed(evt);
            }
        });
        jPanel1.add(ANIMAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 160, 50));

        COUNTRIES.setBackground(new java.awt.Color(204, 255, 255));
        COUNTRIES.setText("COUNTRIES");
        COUNTRIES.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                COUNTRIESMousePressed(evt);
            }
        });
        COUNTRIES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                COUNTRIESActionPerformed(evt);
            }
        });
        jPanel1.add(COUNTRIES, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 160, 40));

        VEGETABLES.setBackground(new java.awt.Color(204, 255, 255));
        VEGETABLES.setText("VEGETABLES");
        VEGETABLES.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                VEGETABLESMousePressed(evt);
            }
        });
        VEGETABLES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VEGETABLESActionPerformed(evt);
            }
        });
        jPanel1.add(VEGETABLES, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 160, 40));

        FRUITS.setBackground(new java.awt.Color(204, 255, 255));
        FRUITS.setText("FRUITS");
        FRUITS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FRUITSMousePressed(evt);
            }
        });
        FRUITS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FRUITSActionPerformed(evt);
            }
        });
        jPanel1.add(FRUITS, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 160, 40));

        MOVIES.setBackground(new java.awt.Color(204, 255, 255));
        MOVIES.setText("MOVIES");
        MOVIES.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MOVIESMousePressed(evt);
            }
        });
        MOVIES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MOVIESActionPerformed(evt);
            }
        });
        jPanel1.add(MOVIES, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 160, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MOVIESMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MOVIESMousePressed
        // TODO add your handling code here:
        path="C:\\Users\\LAPTOP\\Documents\\NetBeansProjects\\4homework\\src\\main\\java\\PROJECT_DS\\movies.txt";
    }//GEN-LAST:event_MOVIESMousePressed

    private void FRUITSMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FRUITSMousePressed
        // TODO add your handling code here:
        path="C:\\Users\\LAPTOP\\Documents\\NetBeansProjects\\4homework\\src\\main\\java\\PROJECT_DS\\Fruits.txt";
    }//GEN-LAST:event_FRUITSMousePressed

    private void COUNTRIESMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_COUNTRIESMousePressed
        // TODO add your handling code here:
        path="C:\\Users\\LAPTOP\\Documents\\NetBeansProjects\\4homework\\src\\main\\java\\PROJECT_DS\\Countries.txt";
    }//GEN-LAST:event_COUNTRIESMousePressed

    private void ANIMALMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ANIMALMousePressed
        // TODO add your handling code here:
        path="C:\\Users\\LAPTOP\\Documents\\NetBeansProjects\\4homework\\src\\main\\java\\PROJECT_DS\\animals.txt";

    }//GEN-LAST:event_ANIMALMousePressed

    private void VEGETABLESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VEGETABLESActionPerformed
        // TODO add your handling code here:
        try {
            
            // getting the path of file
            Path p = Paths.get(path);
            // counting the number of lines in the file so that we can make an array according to that
            int lines = (int) Files.lines(p).count();

            File f = new File(path);
            Scanner input = new Scanner(f);
            String[] dictionary= new String[lines];

            for(int i = 0; input.hasNextLine(); i++){
                // reading each line one by one from the file through scanner
                String temp  = input.nextLine();
                // the symbol @ has been introduced in the dictionary file and has been used to split the sentence into word and meaning

                // splitting the string only if it contains @
                dictionary[i] = temp;
            }

            for (int i =0 ; i < dictionary.length ; i++){
                // using the random class for shuffling
                int random = (int) (Math.random()* dictionary.length);

                // shuffling the elements using the temperory method
                String temp = dictionary[random];
                dictionary[random] = dictionary[i];
                dictionary[i] = temp;
            }

            int bstsize = 0;
            for (int i =0 ; i < dictionary.length ; i++){
                BSTnode n = new BSTnode(dictionary[i]);
                // inserting the nodes in the bst class
                n = mybst.insert(n.word);
            }
            input.close();

            System.out.println();
//            Hangman2 obj=new Hangman2();
//            obj.setVisible(true);
        }
        catch (FileNotFoundException e){
            System.out.println(e);
        }
        //catching the Input Output exception here
        catch(IOException e){
            System.out.println(e);
        }
         Hangman2 obj=new Hangman2();
        obj.setVisible(true);
    }//GEN-LAST:event_VEGETABLESActionPerformed

    private void ANIMALActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ANIMALActionPerformed
        // TODO add your handling code here:
        try {
            
            // getting the path of file
            Path p = Paths.get(path);
            // counting the number of lines in the file so that we can make an array according to that
            int lines = (int) Files.lines(p).count();

            File f = new File(path);
            Scanner input = new Scanner(f);
            String[] dictionary= new String[lines];

            for(int i = 0; input.hasNextLine(); i++){
                // reading each line one by one from the file through scanner
                String temp  = input.nextLine();
                // the symbol @ has been introduced in the dictionary file and has been used to split the sentence into word and meaning

                // splitting the string only if it contains @
                dictionary[i] = temp;
            }

            for (int i =0 ; i < dictionary.length ; i++){
                // using the random class for shuffling
                int random = (int) (Math.random()* dictionary.length);

                // shuffling the elements using the temperory method
                String temp = dictionary[random];
                dictionary[random] = dictionary[i];
                dictionary[i] = temp;
            }

            int bstsize = 0;
            for (int i =0 ; i < dictionary.length ; i++){
                BSTnode n = new BSTnode(dictionary[i]);
                // inserting the nodes in the bst class
                n = mybst.insert(n.word);
            }
            input.close();

            System.out.println();
        }
        catch (FileNotFoundException e){
            System.out.println(e);
        }
        //catching the Input Output exception here
        catch(IOException e){
            System.out.println(e);
        }
        Hangman2 obj=new Hangman2();
        obj.setVisible(true);
    }//GEN-LAST:event_ANIMALActionPerformed

    private void COUNTRIESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_COUNTRIESActionPerformed
        // TODO add your handling code here:
        try {
            
            // getting the path of file
            Path p = Paths.get(path);
            // counting the number of lines in the file so that we can make an array according to that
            int lines = (int) Files.lines(p).count();

            File f = new File(path);
            Scanner input = new Scanner(f);
            String[] dictionary= new String[lines];

            for(int i = 0; input.hasNextLine(); i++){
                // reading each line one by one from the file through scanner
                String temp  = input.nextLine();
                // the symbol @ has been introduced in the dictionary file and has been used to split the sentence into word and meaning

                // splitting the string only if it contains @
                dictionary[i] = temp;
            }

            for (int i =0 ; i < dictionary.length ; i++){
                // using the random class for shuffling
                int random = (int) (Math.random()* dictionary.length);

                // shuffling the elements using the temperory method
                String temp = dictionary[random];
                dictionary[random] = dictionary[i];
                dictionary[i] = temp;
            }

            int bstsize = 0;
            for (int i =0 ; i < dictionary.length ; i++){
                BSTnode n = new BSTnode(dictionary[i]);
                // inserting the nodes in the bst class
                n = mybst.insert(n.word);
            }
            input.close();

            System.out.println();
        }
        catch (FileNotFoundException e){
            System.out.println(e);
        }
        //catching the Input Output exception here
        catch(IOException e){
            System.out.println(e);
        }
        Hangman2 obj=new Hangman2();
        obj.setVisible(true);
    }//GEN-LAST:event_COUNTRIESActionPerformed

    private void VEGETABLESMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VEGETABLESMousePressed
        // TODO add your handling code here:
         path="C:\\Users\\LAPTOP\\Documents\\NetBeansProjects\\4homework\\src\\main\\java\\PROJECT_DS\\Vegetables.txt";
    }//GEN-LAST:event_VEGETABLESMousePressed

    private void FRUITSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FRUITSActionPerformed
        // TODO add your handling code here:
        try {
            
            // getting the path of file
            Path p = Paths.get(path);
            // counting the number of lines in the file so that we can make an array according to that
            int lines = (int) Files.lines(p).count();

            File f = new File(path);
            Scanner input = new Scanner(f);
            String[] dictionary= new String[lines];

            for(int i = 0; input.hasNextLine(); i++){
                // reading each line one by one from the file through scanner
                String temp  = input.nextLine();
                // the symbol @ has been introduced in the dictionary file and has been used to split the sentence into word and meaning

                // splitting the string only if it contains @
                dictionary[i] = temp;
            }

            for (int i =0 ; i < dictionary.length ; i++){
                // using the random class for shuffling
                int random = (int) (Math.random()* dictionary.length);

                // shuffling the elements using the temperory method
                String temp = dictionary[random];
                dictionary[random] = dictionary[i];
                dictionary[i] = temp;
            }

            int bstsize = 0;
            for (int i =0 ; i < dictionary.length ; i++){
                BSTnode n = new BSTnode(dictionary[i]);
                // inserting the nodes in the bst class
                n = mybst.insert(n.word);
            }
            input.close();

            System.out.println();
        }
        catch (FileNotFoundException e){
            System.out.println(e);
        }
        //catching the Input Output exception here
        catch(IOException e){
            System.out.println(e);
        }
         Hangman2 obj=new Hangman2();
        obj.setVisible(true);
    }//GEN-LAST:event_FRUITSActionPerformed

    private void MOVIESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MOVIESActionPerformed
        // TODO add your handling code here:
        try {
            
            // getting the path of file
            Path p = Paths.get(path);
            // counting the number of lines in the file so that we can make an array according to that
            int lines = (int) Files.lines(p).count();

            File f = new File(path);
            Scanner input = new Scanner(f);
            String[] dictionary= new String[lines];

            for(int i = 0; input.hasNextLine(); i++){
                // reading each line one by one from the file through scanner
                String temp  = input.nextLine();
                // the symbol @ has been introduced in the dictionary file and has been used to split the sentence into word and meaning

                // splitting the string only if it contains @
                dictionary[i] = temp;
            }

            for (int i =0 ; i < dictionary.length ; i++){
                // using the random class for shuffling
                int random = (int) (Math.random()* dictionary.length);

                // shuffling the elements using the temperory method
                String temp = dictionary[random];
                dictionary[random] = dictionary[i];
                dictionary[i] = temp;
            }

            int bstsize = 0;
            for (int i =0 ; i < dictionary.length ; i++){
                BSTnode n = new BSTnode(dictionary[i]);
                // inserting the nodes in the bst class
                n = mybst.insert(n.word);
            }
            input.close();

            System.out.println();
        }
        catch (FileNotFoundException e){
            System.out.println(e);
        }
        //catching the Input Output exception here
        catch(IOException e){
            System.out.println(e);
        }
         Hangman2 obj=new Hangman2();
        obj.setVisible(true);
    }//GEN-LAST:event_MOVIESActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Hangman1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Hangman1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Hangman1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Hangman1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hangman1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ANIMAL;
    private javax.swing.JButton COUNTRIES;
    private javax.swing.JButton FRUITS;
    private javax.swing.JButton MOVIES;
    private javax.swing.JButton VEGETABLES;
    private javax.swing.Box.Filler hangStand2;
    private javax.swing.Box.Filler hangstand;
    private javax.swing.Box.Filler hangstand1;
    private javax.swing.Box.Filler hangstand3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
